edges = network.test.edges(pcor,direct=FALSE, plot=TRUE)
# We declare as significant the edges with a prob >.8
net = extract.network(edges, cutoff.ggm=.8)
# Construct Graph
gr = network.make.graph(net, node.labels, drop.singles=TRUE)
edges
edges
pcor
head(pcor)
knitr::opts_chunk$set(echo = TRUE, fig.height=7, fig.width=8)
# Chargement des packages
library(RGCCA)
devtools::install_github(repo="https://github.com/rgcca-factory/RGCCA.git", ref = "main")
install.packages("devtools")
devtools::install_github(repo="https://github.com/rgcca-factory/RGCCA.git", ref = "main")
# Chargement des packages
library(RGCCA)
data(Russett)
head(Russett)
X1 = Russett[, 1:3] # CrÃ©ation du bloc 1
X2 = Russett[, 4:5]  # CrÃ©ation du bloc 2
X3 = Russett[, c(6:9, 11)] # CrÃ©ation du bloc 3
x1
X1
L = list(Agric = X1, DevInd = X2, Polit = X3)
lapply(L, head)
C = matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3)
C
tau = c(1, 1, 1)
tau
fit.rgcca = rgcca(L, connection = C, tau = tau,
scheme = function(x) x^2, ncomp = 2,
init = "random", verbose = TRUE, tol = 1e-16)
plot(fit.rgcca, display_order = FALSE)
boot_out = rgcca_bootstrap(fit.rgcca, 500)
print(boot_out)
plot(boot_out, display_order = FALSE)
lab = factor(apply(Russett[, 9:11], 1, which.max),
labels = c("demostab", "demoinst", "dictator"))
plot(fit.rgcca, type = "sample", resp = lab)
plot(fit.rgcca, type = "cor_circle", comp = 1:2)
setwd("~/01 - Etudes/01_CentraleSupélec/01 - 3A/Mention/ADMA/AMDA_Mondor")
")
e
)
()
""
"
art = read.csv("data/art.csv")
art = read.csv("data/art.csv", sep=",")
art = read.csv("data/art.csv", sep=";")
art
dim(art)
port = read.csv("data/port.csv", sep=";")
art
head(art)
art.rownames
rownames(art)
art = read.csv("data/art.csv", sep=";", row.names = 1)
rownames(art)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
labels = read.csv("data/label.csv", sep=";", row.names = 1)
labels
art[1:10,1:10]
array(NA, dim=c(3,2,4))
type(array(NA, dim=c(3,2,4)))
typeof(array(NA, dim=c(3,2,4)))
class(array(NA, dim=c(3,2,4)))
class(art)
x1 = data.frame(c(1,2,3))
x1
x1 = data.frame("f1"=c(1,2,3))
x1
x1 = data.frame("f1"=c(1,2,3), "f2"=c(0,6,2))
x2 = data.frame("f1" = c(1,7,7), "f2" = c(9,1,1))
array(c(x1, x2))
array(c(x1, x2), dim=c(3, 2, 2))
t = array(c(x1, x2), dim=c(3, 2, 2))
t
t[0]
t[1]
x1
dim(t)
t[2,1,1]
t[2]
t[2][1]
t[2][1][1]
t[1]
t[[1]]
t[[2]]
t[[2]]
t
t[,,1]
t[,,2]
t[1,,1]
t[2,,1]
t
c(x1,x2)
X = array(1, dim=c(3, 2, 2))
X
library(rTensor)
install.packages("rTensor")
library(rTensor)
X = as.tensor(X)
X
X[1]
X[1,2,2]
t = as.tensor(t)
t
t[2,1,2]
t[1]
t[1,,]
t[2,,]
t[3,,]
t[4,,]
t[1]
t[1,,]
t[1,1,]
x1 = data.frame("f1"=c(1,2,3), "f2"=c(0,6,2), "f3" = c(1,7,7), "f4" = c(9,1,1))
x1
t = array(x1, dim=c(3, 2, 2))
t
t[1,,1]
t[1,1,1]
t[1,1,1,1]
t[1,1,1][1]
t = as.tensor(t)
t
t[1,,1]
X = array(1, c(1,1,1))
X
X[,,2]
X[,,1]
X = array(1, c(1,2,2))
X = X.astensor()
X = as.tensor(X)
X
X[1,,]
X[2,,]
X[1,,]
X = array(1, c(3,2,2))
X = as.tensor(X)
X
X[1,,]
X[2,,]
X[3,,]
X = array(1:12, c(3,2,2))
X = as.tensor(X)
X
X[1,,]
X[2,,]
X[3,,]
t[1,,]
X[1,,]
X[2,,]
X[3,,]
X[,1,]
X[,2,]
X[,,1]
X[2,,]
X[,,1]
X[1,,]
x1 = data.frame("f1"=c(1,2,3), "f2"=c(0,6,2))
x2 = data.frame("f3" = c(1,7,7), "f4" = c(9,1,1))
t = array(c(x1, x2), dim=c(3, 2, 2))
t = as.tensor(t)
c(x1,x2)
t[,,1]
t[1,1,1]
X[1,1,1]
abind(art[1:5,1:3],port[1:5,1:3])
lirabry(abind)
library(abind)
abind(art[1:5,1:3],port[1:5,1:3])
dim(art)
dim(art) = c(dim(art)[1], dim(art)[2], 1)
dim(art) = c(dim(art)[1], dim(art)[-1], 1)
dim(art) = c(dim(art)[1], 1, dim(art)[-1])
art = matrix(art)
dim(art) = c(dim(art)[1], 1, dim(art)[-1])
dim(art)
art
art = read.csv("data/art.csv", sep=";", row.names = 1)
art = matrix(art)
art[1:10,1:3]
art
art = read.csv("data/art.csv", sep=";", row.names = 1)
art = data.matrix(art)
art
dim(art) = c(dim(art)[1], dim(art)[2], 1)
art
port = data.matrix(port)
dim(port) = c(dim(port)[1], dim(port)[2], 1)
abind(art[1:5,1:3],port[1:5,1:3], along=3)
abind(art[1:5,1:3,1],port[1:5,1:3,1], along=3)
art[1:5,1:3,1]
extend_dim <- function(data) {
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = read.csv("data/art.csv", sep=";", row.names = 1)
art = extend_dim(art)
art
dim(art)
port = read.csv("data/port.csv", sep=";", row.names = 1)
port = extend_dim(port)
vein = extend_dim(port)
x = 1
x += 1
x = 1
x = x + 1
x
tard = extend_dim(vein)
X = abind(art, port, vein, tard, along=3)
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
art = extend_dim(art)
port = extend_dim(port)
vein = extend_dim(vein)
tard = extend_dim(tard)
X = abind(art, port, vein, tard, along=3)
X[1,1,1,1]
X[1,1,1]
X[1,1,4]
tard[1,1]
tard[1,1,1]
cp_decomp <- cp(as.tensor(X), num_components = 1)
str(cp_decomp$U)
cp_decomp$U[[1]]
plot(1:147, cp_decomp$U[[1]])
plot(1:147, cp_decomp$U[[1]], type="S")
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component")
str(cp_decomp$U)
cp_decomp$U
str(cp_decomp$U)
length(cp_decomp$U[[1]])
length(cp_decomp$U[[2]])
dim(port)
length(cp_decomp$U[[3]])
length(cp_decomp$U[[4]])
plot(1:107, cp_decomp$U[[2]], type="S", main="First CP Component - Radiomic Features")
plot(1:4, cp_decomp$U[[2]], type="S", main="Third CP Component - Time")
plot(1:4, cp_decomp$U[[3]], type="S", main="Third CP Component - Time")
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
rownames(art)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
labels = read.csv("data/label.csv", sep=";", row.names = 1)
scale(data)
scale(art)
typeof(art)
art
art[145,1]
art[art == "#N/A"] = NA
art[145,1]
scale(art)
typesof(art)
typeof(art)
which(is.na(as.numeric(art)))
art
dim(art)
art[[1]]
which(is.na(as.numeric(art[[1]])))
art[[1]][2]
typeof(art[[1]][2])
typeof(art[[1]][1])
typeof(art[1,1])
as.double("3,7")
as.double("3.7")
library(stringr)
art[1,2]
art[[1]]
art[2,1]
art <- str_replace(art, ",", ".")
art[2,1]
dim(art)
library(dplyr)
art = read.csv("data/art.csv", sep=";", row.names = 1)
art[art == "#N/A"] = NA
art <- art %>%
mutate_all(funs(str_replace(., ",", ".")))
art[2,1]
art <- as.data.frame(sapply(art, as.numeric))
art[2,1]
scale(art)
art[1:3,1:4]
art = scale(art)
art[[1]]
art
typeof(art)
class(art)
art[1]
art[[1]]
art[1:3,1:10]
preprocess <- function(data) {
# preprocessing : make all values as floats
data[data == "#N/A"] = NA
data <- data %>%
mutate_all(funs(str_replace(., ",", ".")))
data <- as.data.frame(sapply(data, as.numeric))
# scale the data
data = scale(data)
# extend the dimension
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
labels = read.csv("data/label.csv", sep=";", row.names = 1)
art = preprocess(art)
art
art[1:3,1:15]
art[1:3,1:10,1]
port = preprocess(port)
vein = preprocess(vein)
tard = preprocess(tard)
X = abind(art, port, vein, tard, along=3)
cp_decomp <- cp(as.tensor(X), num_components = 1)
as.tensor(X)@data
as.tensor(X)@data==0
sum(as.tensor(X)@data==0)
as.tensor(X)@data==0
where(isnan(as.tensor(X)@data==0))
where(is.nan(as.tensor(X)@data==0))
which(is.nan(as.tensor(X)@data==0))
as.tensor(X)@data==0
typeof(as.tensor(X)@data==0)
qum(as.tensor(X)@data==0)
sum(as.tensor(X)@data==0)
(as.tensor(X)@data==0)[145,1,1]
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
preprocess <- function(data) {
# preprocessing : make all values as floats
data[data == "#N/A"] = NA
data <- data %>%
mutate_all(funs(str_replace(., ",", ".")))
data <- as.data.frame(sapply(data, as.numeric))
# replace NA values by column mean
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
# scale the data
data = scale(data)
# extend the dimension
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = preprocess(art)
port = preprocess(port)
vein = preprocess(vein)
tard = preprocess(tard)
X = abind(art, port, vein, tard, along=3)
cp_decomp <- cp(as.tensor(X), num_components = 1)
str(cp_decomp$U)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
plot(1:107, cp_decomp$U[[2]], type="S", main="Second CP Component - Radiomic Features")
plot(1:4, cp_decomp$U[[3]], type="S", main="Third CP Component - Time")
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
preprocess <- function(data) {
# preprocessing : make all values as floats
data[data == "#N/A"] = NA
data <- data %>%
mutate_all(funs(str_replace(., ",", ".")))
data <- as.data.frame(sapply(data, as.numeric))
# replace NA values by column mean
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
# scale the data
#data = scale(data)
# extend the dimension
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = preprocess(art)
port = preprocess(port)
vein = preprocess(vein)
tard = preprocess(tard)
X = abind(art, port, vein, tard, along=3)
cp_decomp <- cp(as.tensor(X), num_components = 1)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
plot(1:107, cp_decomp$U[[2]], type="S", main="Second CP Component - Radiomic Features")
plot(1:4, cp_decomp$U[[3]], type="S", main="Third CP Component - Time")
rownames(art)
art = read.csv("data/art.csv", sep=";", row.names = 1)
rownames(art)
rownames(art)[142]
rownames(art)[141]
rownames(art)[1:23]
rownames(art)[1:107]
rownames(art)[143:145]
c(rownames(art)[142], rownames(art)[1:106], rownames(art)[143:145], rownames(art)[107:141], rownames(art)[146:147])
reorder.samples = c(rownames(art)[142], rownames(art)[1:106], rownames(art)[143:145], rownames(art)[107:141], rownames(art)[146:147])
art(reorder.samples)
art[reorder.samples]
art[reorder.samples,]
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
labels = read.csv("data/label.csv", sep=";", row.names = 1)
preprocess <- function(data) {
# reorder samples so that we have first all the CCK, then all CHC, then all Mixtes
reorder.samples = c(rownames(data)[142],
rownames(data)[1:106],
rownames(data)[143:145],
rownames(data)[107:141],
rownames(data)[146:147])
data = data[reorder.samples,]
# preprocessing : make all values as floats
data[data == "#N/A"] = NA
data <- data %>%
mutate_all(funs(str_replace(., ",", ".")))
data <- as.data.frame(sapply(data, as.numeric))
# replace NA values by column mean
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
# scale the data
data = scale(data)
# extend the dimension
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = preprocess(art)
port = preprocess(port)
vein = preprocess(vein)
tard = preprocess(tard)
X = abind(art, port, vein, tard, along=3)
cp_decomp <- cp(as.tensor(X), num_components = 1)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
reorder.samples
reorder.samples[24]
reorder.samples[23]
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=24)
abline(v=111)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=24, c="blue")
abline(v=111, c="blue")
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=24, col="blue")
abline(v=111, col="blue")
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=24, col="blue")
abline(v=111, col="blue")
plot
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=111, col="blue")
library(rTensor)
library(abind)
library(stringr)
library(dplyr)
art = read.csv("data/art.csv", sep=";", row.names = 1)
port = read.csv("data/port.csv", sep=";", row.names = 1)
vein = read.csv("data/vein.csv", sep=";", row.names = 1)
tard = read.csv("data/tard.csv", sep=";", row.names = 1)
labels = read.csv("data/label.csv", sep=";", row.names = 1)
preprocess <- function(data) {
# reorder samples so that we have first all the CCK, then all CHC, then all Mixtes
reorder.samples = c(rownames(data)[142],
rownames(data)[1:106],
rownames(data)[143:145],
rownames(data)[107:141],
rownames(data)[146:147])
data = data[reorder.samples,]
# preprocessing : make all values as floats
data[data == "#N/A"] = NA
data <- data %>%
mutate_all(funs(str_replace(., ",", ".")))
data <- as.data.frame(sapply(data, as.numeric))
# replace NA values by column mean
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
# scale the data
data = scale(data)
# extend the dimension
data = data.matrix(data)
dim(data) = c(dim(data)[1], dim(data)[2], 1)
return(data)
}
art = preprocess(art)
port = preprocess(port)
vein = preprocess(vein)
tard = preprocess(tard)
X = abind(art, port, vein, tard, along=3)
cp_decomp <- cp(as.tensor(X), num_components = 1)
plot(1:147, cp_decomp$U[[1]], type="S", main="First CP Component - Individuals")
abline(v=24, col="blue")
abline(v=111, col="blue")
